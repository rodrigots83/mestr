subtitle = paste(atributo, variavelDependente, sep = " vs "),
caption = "") +
theme_bw()
# facet_wrap(~ atributo2)
print(result)
}
}
}
box_plot(credit, copiaVariaveis1Winsored, NULL)
box_plot(credit, copiaVariaveis1Winsored, variaveisSubgrupo)
box_plot(credit, c("winsored_Rentabilidade"), variaveisSubgrupo)
box_plot(credit, copiaVariaveis1Winsored, NULL)
box_plot(credit, c("winsored_Movimentacoes_PERC"), variaveisSubgrupo)
box_plot(credit, c("winsored_Movimentacoes"), variaveisSubgrupo)
box_plot(credit, variaveis2, NULL)
box_plot(credit, c("winsored_Aplicacao"), variaveisSubgrupo)
box_plot(credit, variaveis2, NULL)
box_plot(credit, variaveis1, NULL)
winsor?
?winsor
str(dtAmostra)
variaveisIniciais <- c("Produto",
"Produtos_Anterior",
"Produtos_DIF",
"winsored_Produtos_Qualificados_PERC",
"Produtos_Qualificados_DIRF",
"Produtos_Qualificados_Anterior",
"Produtos_Qualificados",
"winsored_Produtos_PERC",
"winsored_Aplicacao",
"winsored_Aplicacao_Anterior",
"winsored_Aplicacao_PERC",
"winsored_Aplicacao_DIF",
"winsored_Movimentacoes",
"winsored_Movimentacoes_DIF",
"winsored_Movimentacoes_PERC",
"winsored_Movimentacoes_Anterior",
"winsored_Credito",
"winsored_Credito_Anterior",
"winsored_Credito_PERC",
"winsored_Credito_DIF",
"winsored_Rentabilidade",
"winsored_Rentabilidade_DIF",
"winsored_Rentabilidade_Anterior",
"winsored_Rentabilidade_PERC")
box_plot(credit, variaveisIniciais, NULL)
str(dtAmostra)
variaveisIniciais <- c("Produtos",
"Produtos_Anterior",
"Produtos_DIF",
"winsored_Produtos_Qualificados_PERC",
"Produtos_Qualificados_DIRF",
"Produtos_Qualificados_Anterior",
"Produtos_Qualificados",
"winsored_Produtos_PERC",
"winsored_Aplicacao",
"winsored_Aplicacao_Anterior",
"winsored_Aplicacao_PERC",
"winsored_Aplicacao_DIF",
"winsored_Movimentacoes",
"winsored_Movimentacoes_DIF",
"winsored_Movimentacoes_PERC",
"winsored_Movimentacoes_Anterior",
"winsored_Credito",
"winsored_Credito_Anterior",
"winsored_Credito_PERC",
"winsored_Credito_DIF",
"winsored_Rentabilidade",
"winsored_Rentabilidade_DIF",
"winsored_Rentabilidade_Anterior",
"winsored_Rentabilidade_PERC")
box_plot(credit, variaveisIniciais, NULL)
variaveisIniciais <- c("Produtos",
"Produtos_Anterior",
"Produtos_DIF",
"winsored_Produtos_Qualificados_PERC",
"Produtos_Qualificados_DIF",
"Produtos_Qualificados_Anterior",
"Produtos_Qualificados",
"winsored_Produtos_PERC",
"winsored_Aplicacao",
"winsored_Aplicacao_Anterior",
"winsored_Aplicacao_PERC",
"winsored_Aplicacao_DIF",
"winsored_Movimentacoes",
"winsored_Movimentacoes_DIF",
"winsored_Movimentacoes_PERC",
"winsored_Movimentacoes_Anterior",
"winsored_Credito",
"winsored_Credito_Anterior",
"winsored_Credito_PERC",
"winsored_Credito_DIF",
"winsored_Rentabilidade",
"winsored_Rentabilidade_DIF",
"winsored_Rentabilidade_Anterior",
"winsored_Rentabilidade_PERC")
box_plot(credit, variaveisIniciais, NULL)
dtAmostra =
dtAmostra %>%
mutate(Evadiu_formatado = ifelse(Evadiu == 1, "Sim", "N達o")) %>%
mutate(winsored_Rentabilidade_PERC = psych::winsor(Rentabilidade_PERC, 0.1)) %>%
mutate(winsored_Produtos = psych::winsor(Produtos, 0.01)) %>%
mutate(winsored_Produtos_Qualificados_PERC = psych::winsor(Produtos_Qualificados_PERC, 0.01)) %>%
mutate(winsored_Produtos_PERC = psych::winsor(Produtos_PERC, 0.01)) %>%
mutate(winsored_Movimentacoes = psych::winsor(Movimentacoes, 0.1)) %>%
mutate(winsored_Movimentacoes_DIF = psych::winsor(Movimentacoes_DIF, 0.1)) %>%
mutate(winsored_Movimentacoes_PERC = psych::winsor(Movimentacoes_PERC, 0.1)) %>%
mutate(winsored_Aplicacao = psych::winsor(Aplicacao, 0.1)) %>%
mutate(winsored_Aplicacao_Anterior = psych::winsor(Aplicacao_Anterior, 0.1)) %>%
mutate(winsored_Aplicacao_DIF = psych::winsor(Aplicacao_DIF, 0.1)) %>%
mutate(winsored_Aplicacao_PERC = psych::winsor(Aplicacao_PERC, 0.1)) %>%
mutate(winsored_Credito = psych::winsor(Credito, 0.1)) %>%
mutate(winsored_Credito_Anterior = psych::winsor(Credito_Anterior, 0.1)) %>%
mutate(winsored_Credito_DIF = psych::winsor(Credito_DIF, 0.1)) %>%
mutate(winsored_Credito_PERC = psych::winsor(Credito_PERC, 0.1)) %>%
mutate(winsored_Rentabilidade = psych::winsor(Rentabilidade, 0.1)) %>%
mutate(winsored_Rentabilidade_Anterior = psych::winsor(Rentabilidade_Anterior, 0.1)) %>%
mutate(winsored_Rentabilidade_DIF = psych::winsor(Rentabilidade_DIF, 0.1)) %>%
mutate(winsored_Rentabilidade_PERC = psych::winsor(Rentabilidade_PERC, 0.1))
box_plot(credit, variaveisIniciais, NULL)
dtAmostra =
dtAmostra %>%
mutate(Evadiu_formatado = ifelse(Evadiu == 1, "Sim", "N達o")) %>%
mutate(winsored_Rentabilidade_PERC = psych::winsor(Rentabilidade_PERC, 0.1)) %>%
mutate(winsored_Produtos = psych::winsor(Produtos, 0.01)) %>%
mutate(winsored_Produtos_Qualificados_PERC = psych::winsor(Produtos_Qualificados_PERC, 0.01)) %>%
mutate(winsored_Produtos_PERC = psych::winsor(Produtos_PERC, 0.01)) %>%
mutate(winsored_Movimentacoes = psych::winsor(Movimentacoes, 0.1)) %>%
mutate(winsored_Movimentacoes_Anterior = psych::winsor(Movimentacoes_Anterior, 0.1)) %>%
mutate(winsored_Movimentacoes_DIF = psych::winsor(Movimentacoes_DIF, 0.1)) %>%
mutate(winsored_Movimentacoes_PERC = psych::winsor(Movimentacoes_PERC, 0.1)) %>%
mutate(winsored_Aplicacao = psych::winsor(Aplicacao, 0.1)) %>%
mutate(winsored_Aplicacao_Anterior = psych::winsor(Aplicacao_Anterior, 0.1)) %>%
mutate(winsored_Aplicacao_DIF = psych::winsor(Aplicacao_DIF, 0.1)) %>%
mutate(winsored_Aplicacao_PERC = psych::winsor(Aplicacao_PERC, 0.1)) %>%
mutate(winsored_Credito = psych::winsor(Credito, 0.1)) %>%
mutate(winsored_Credito_Anterior = psych::winsor(Credito_Anterior, 0.1)) %>%
mutate(winsored_Credito_DIF = psych::winsor(Credito_DIF, 0.1)) %>%
mutate(winsored_Credito_PERC = psych::winsor(Credito_PERC, 0.1)) %>%
mutate(winsored_Rentabilidade = psych::winsor(Rentabilidade, 0.1)) %>%
mutate(winsored_Rentabilidade_Anterior = psych::winsor(Rentabilidade_Anterior, 0.1)) %>%
mutate(winsored_Rentabilidade_DIF = psych::winsor(Rentabilidade_DIF, 0.1)) %>%
mutate(winsored_Rentabilidade_PERC = psych::winsor(Rentabilidade_PERC, 0.1))
box_plot(credit, variaveisIniciais, NULL)
box_plot(credit, variaveisIniciais, NULL)
dtAmostra <- fread("dadosBanco/Amostra_Modelo_Evasao_Correntistas_v3.csv")
str(dtAmostra)
dtAmostra <- fread("dadosBanco/Amostra_Modelo_Evasao_Correntistas_v3.csv")
str(dtAmostra)
box_plot(credit, c("Aplicacao"), NULL)
dtAmostra =
dtAmostra %>%
mutate(Evadiu_formatado = ifelse(Evadiu == 1, "Sim", "N達o")) %>%
mutate(winsored_Rentabilidade_PERC = psych::winsor(Rentabilidade_PERC, 0.1)) %>%
mutate(winsored_Produtos = psych::winsor(Produtos, 0.01)) %>%
mutate(winsored_Produtos_Qualificados_PERC = psych::winsor(Produtos_Qualificados_PERC, 0.01)) %>%
mutate(winsored_Produtos_PERC = psych::winsor(Produtos_PERC, 0.01)) %>%
mutate(winsored_Movimentacoes = psych::winsor(Movimentacoes, 0.1)) %>%
mutate(winsored_Movimentacoes_Anterior = psych::winsor(Movimentacoes_Anterior, 0.1)) %>%
mutate(winsored_Movimentacoes_DIF = psych::winsor(Movimentacoes_DIF, 0.1)) %>%
mutate(winsored_Movimentacoes_PERC = psych::winsor(Movimentacoes_PERC, 0.1)) %>%
mutate(winsored_Aplicacao = psych::winsor(Aplicacao, 0.1)) %>%
mutate(winsored_Aplicacao_Anterior = psych::winsor(Aplicacao_Anterior, 0.1)) %>%
mutate(winsored_Aplicacao_DIF = psych::winsor(Aplicacao_DIF, 0.1)) %>%
mutate(winsored_Aplicacao_PERC = psych::winsor(Aplicacao_PERC, 0.1)) %>%
mutate(winsored_Credito = psych::winsor(Credito, 0.1)) %>%
mutate(winsored_Credito_Anterior = psych::winsor(Credito_Anterior, 0.1)) %>%
mutate(winsored_Credito_DIF = psych::winsor(Credito_DIF, 0.1)) %>%
mutate(winsored_Credito_PERC = psych::winsor(Credito_PERC, 0.1)) %>%
mutate(winsored_Rentabilidade = psych::winsor(Rentabilidade, 0.1)) %>%
mutate(winsored_Rentabilidade_Anterior = psych::winsor(Rentabilidade_Anterior, 0.1)) %>%
mutate(winsored_Rentabilidade_DIF = psych::winsor(Rentabilidade_DIF, 0.1)) %>%
mutate(winsored_Rentabilidade_PERC = psych::winsor(Rentabilidade_PERC, 0.1))
box_plot(credit, c("Aplicacao"), NULL)
dtAmostra$Evadiu <- as.factor(dtAmostra$Evadiu)
dtAmostra$Debito_Automatico <- as.factor(dtAmostra$Debito_Automatico)
dtAmostra$Credito_Salario <- as.factor(dtAmostra$Credito_Salario)
dtAmostra$Credenciamento <- as.factor(dtAmostra$Credenciamento)
dtAmostra$Caixa_Seguradora <- as.factor(dtAmostra$Caixa_Seguradora)
dtAmostra$Pediu_Portabilidade <- as.factor(dtAmostra$Pediu_Portabilidade)
dtAmostra$Abriu_Reclamacao <- as.factor(dtAmostra$Abriu_Reclamacao)
dtAmostra$Debito_Automatico_DIF <- as.factor(dtAmostra$Debito_Automatico_DIF)
dtAmostra$Credito_Salario_DIF <- as.factor(dtAmostra$Credito_Salario_DIF)
dtAmostra$Caixa_Seguradora_DIF <- as.factor(dtAmostra$Caixa_Seguradora_DIF)
dtAmostra = dtAmostra %>% mutate(Evadiu_formatado = ifelse(Evadiu == 1, "Sim", "N達o"))
str(dtAmostra)
box_plot(credit, c("Aplicacao"), NULL)
variaveisSubgrupo <- c("Segmento", "Credenciamento", "Caixa_Seguradora", "Caixa_Seguradora_DIF", "Credito_Salario", "Debito_Automatico", "Credito_Salario_DIF", "Debito_Automatico_DIF")
variaveisIniciais <- c("Produtos",
"Produtos_Anterior",
"Produtos_DIF",
"winsored_Produtos_Qualificados_PERC",
"Produtos_Qualificados_DIF",
"Produtos_Qualificados_Anterior",
"Produtos_Qualificados",
"winsored_Produtos_PERC",
"winsored_Aplicacao",
"winsored_Aplicacao_Anterior",
"winsored_Aplicacao_PERC",
"winsored_Aplicacao_DIF",
"winsored_Movimentacoes",
"winsored_Movimentacoes_DIF",
"winsored_Movimentacoes_PERC",
"winsored_Movimentacoes_Anterior",
"winsored_Credito",
"winsored_Credito_Anterior",
"winsored_Credito_PERC",
"winsored_Credito_DIF",
"winsored_Rentabilidade",
"winsored_Rentabilidade_DIF",
"winsored_Rentabilidade_Anterior",
"winsored_Rentabilidade_PERC")
box_plot(credit, variaveisIniciais, NULL)
box_plot(credit, c("winsored_Movimentacoes", "Produtos_Qualificados", "winsored_Aplicacao_PERC", "winsored_Credito_DIF"), variaveisSubgrupo)
stargazer(dtAmostra, type = "text")
dtAmostra(max(dtAmostra$Aplicacao))
dtAmostra(max(dtAmostra$Aplicacao))
dtAmostra(max("Aplicacao"))
dtAmostra()
dtAmostra[max("Aplicacao"),,]
dtAmostra[max(dtAmostra$Aplicacao),,]
dtAmostra[,dtAmostra$Aplicacao,]
dtAmostra[,dtAmostra$Aplicacao,]
dtAmostra[dtAmostra$Aplicacao,,]
dtAmostra["Aplicacao"]
dtAmostra[dtAmostra$Aplicacao]
dtAmostra[.N]
dtAmostra["Aplicacao"]
max(dtAmostra["Aplicacao"])
stargazer(dtAmostra, type = "text")
stargazer(dtAmostra, type = "text")
max(dtAmostra["Aplicacao"])
models =
caretList(EvadiuTipo ~ .,
data = data,
trControl = control,
metric = "ROC",
tuneList = list(#adaboost     = caretModelSpec(method = "adaboost"), #muito demorado para rodar
arvoreDecisao = caretModelSpec(method = "rpart",
tuneGrid = expand.grid(cp = seq(0, 10, length = 20))),
knn           = caretModelSpec(method = "knn"),
logit         = caretModelSpec(method = "glm", family = "binomial"),
elasticnet    = caretModelSpec(method = "glmnet"),
redeNeural    = caretModelSpec(method = "mlpML"),
rf            = caretModelSpec(method = "ranger")),
preProcess = c("knnImpute", "nzv", "center", "scale"))
library(ggplot2)
library(data.table)
library(stargazer)
library(skimr)
library(Rcpp)
library(readxl)
library(dplyr)
library(tidyverse)
library(caret)
library(mlbench)
library(caretEnsemble)
library(rattle)
dtAmostra <- fread("dadosBanco/Amostra_Modelo_Evasao_Correntistas_v3.csv")
str(dtAmostra)
str(dtAmostra)
set.seed(1986)
dtAmostra =
dtAmostra %>%
mutate_if(is.ordered, as.numeric) %>%
mutate(EvadiuTipo = as.numeric(Evadiu)) %>%
# mutate(Segmento_Num1 = ifelse(Segmento == "GV", 1, ifelse(Segmento == "GC", 2, ifelse(Segmento == "GR", 3, 4)))) %>%
# mutate(Segmento_Num = as.factor(Segmento_Num1)) %>%
# select(-Id, -Evadiu, -Evadiu_formatado, -Segmento_Descricao, -Segmento, -Segmento_Num1, -Pediu_Portabilidade, -Abriu_Reclamacao) %>%
select(-Id, -Pediu_Portabilidade, -Abriu_Reclamacao, -Evadiu) %>%
# select(-Id, -Evadiu, -Segmento, -Segmento_Num1, -Pediu_Portabilidade, -Abriu_Reclamacao) %>%
drop_na() %>%
as.data.table()
dummyVar_model = dummyVars(formula = ~ .,
data = dtAmostra)
data = as.data.table(predict(dummyVar_model, newdata = dtAmostra))
str(data)
problematicVariables = nearZeroVar(data, names = T)
problematicVariables
data =
data %>%
# select(-problematicVariables) %>%
mutate(EvadiuTipo = case_when(
EvadiuTipo == 0 ~ "N達o",
EvadiuTipo == 1 ~ "Sim"))
str(data)
table(data$EvadiuTipo)
### Rodando o modelo de machine learning
control <- trainControl(method = "repeatedcv", #boot, cv, LOOCV, timeslice OR adaptive etc.
number = 10,
repeats = 20,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final",
allowParallel = TRUE)
control
models =
caretList(EvadiuTipo ~ .,
data = data,
trControl = control,
metric = "ROC",
tuneList = list(#adaboost     = caretModelSpec(method = "adaboost"), #muito demorado para rodar
arvoreDecisao = caretModelSpec(method = "rpart",
tuneGrid = expand.grid(cp = seq(0, 5, length = 10))),# 10, 20
knn           = caretModelSpec(method = "knn"),
logit         = caretModelSpec(method = "glm", family = "binomial"),
elasticnet    = caretModelSpec(method = "glmnet"),
redeNeural    = caretModelSpec(method = "mlpML"),
rf            = caretModelSpec(method = "ranger")),
preProcess = c("knnImpute", "nzv", "center", "scale"))
models =
caretList(EvadiuTipo ~ .,
data = data,
trControl = control,
metric = "ROC",
tuneList = list(#adaboost     = caretModelSpec(method = "adaboost"), #muito demorado para rodar
arvoreDecisao = caretModelSpec(method = "rpart"),
knn           = caretModelSpec(method = "knn"),
logit         = caretModelSpec(method = "glm", family = "binomial"),
elasticnet    = caretModelSpec(method = "glmnet"),
redeNeural    = caretModelSpec(method = "mlpML"),
rf            = caretModelSpec(method = "ranger")),
preProcess = c("knnImpute", "nzv", "center", "scale"))
model_arvoreDecisao1 = caret::train(EvadiuTipo ~ .,
data         = preprocessed_data,
trControl    = control,
metric       = "ROC",
method       = 'rpart',
tuneLength   = 5)
model_preProcess = preProcess(x = data, method = c("center", "scale"))
preprocessed_data = predict(model_preProcess, newdata = data)
### Rodando uma 叩rvore de decis達o com repeated k-fold cross-validation
### Fun巽達o de maximiza巽達o: ROC
model_arvoreDecisao1 = caret::train(EvadiuTipo ~ .,
data         = preprocessed_data,
trControl    = control,
metric       = "ROC",
method       = 'rpart',
tuneLength   = 5)
### A cara da 叩rvore de decis達o...
rattle::fancyRpartPlot(model_arvoreDecisao1$finalModel)
str(preprocessed_data)
str(data)
stargazer::stargazer(preprocessed_data, type = "text")
stargazer::stargazer(data, type = "text")
model_arvoreDecisao1 = caret::train(EvadiuTipo ~ .,
data         = data,
trControl    = control,
metric       = "ROC",
method       = 'rpart',
tuneLength   = 5)
### A cara da 叩rvore de decis達o...
rattle::fancyRpartPlot(model_arvoreDecisao1$finalModel)
stargazer::stargazer(data, type = "text")
featureSelection_arvoreDecisao = varImp(model_arvoreDecisao1)
plot(featureSelection_arvoreDecisao)
control <- trainControl(method = "repeatedcv", #boot, cv, LOOCV, timeslice OR adaptive etc.
number = 10,
repeats = 1,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final")
model_arvoreDecisao1 = caret::train(EvadiuTipo ~ .,
data         = data,
trControl    = control,
metric       = "ROC",
method       = 'rpart',
tuneLength   = 5)
library(ggplot2)
library(data.table)
library(stargazer)
library(skimr)
library(Rcpp)
library(readxl)
library(dplyr)
library(tidyverse)
library(caret)
library(mlbench)
library(caretEnsemble)
library(rattle)
library(ggplot2)
library(data.table)
library(stargazer)
library(skimr)
library(Rcpp)
library(readxl)
library(dplyr)
library(tidyverse)
library(caret)
library(mlbench)
library(caretEnsemble)
library(rattle)
dtAmostra <- fread("dadosBanco/Amostra_Modelo_Evasao_Correntistas_v3.csv")
set.seed(1986)
dtAmostra =
dtAmostra %>%
mutate_if(is.ordered, as.numeric) %>%
mutate(EvadiuTipo = as.numeric(Evadiu)) %>%
# mutate(Segmento_Num1 = ifelse(Segmento == "GV", 1, ifelse(Segmento == "GC", 2, ifelse(Segmento == "GR", 3, 4)))) %>%
# mutate(Segmento_Num = as.factor(Segmento_Num1)) %>%
# select(-Id, -Evadiu, -Evadiu_formatado, -Segmento_Descricao, -Segmento, -Segmento_Num1, -Pediu_Portabilidade, -Abriu_Reclamacao) %>%
select(-Id, -Pediu_Portabilidade, -Abriu_Reclamacao, -Evadiu) %>%
# select(-Id, -Evadiu, -Segmento, -Segmento_Num1, -Pediu_Portabilidade, -Abriu_Reclamacao) %>%
drop_na() %>%
as.data.table()
dummyVar_model = dummyVars(formula = ~ .,
data = dtAmostra)
data = as.data.table(predict(dummyVar_model, newdata = dtAmostra))
str(data)
problematicVariables = nearZeroVar(data, names = T)
problematicVariables
data =
data %>%
# select(-problematicVariables) %>%
mutate(EvadiuTipo = case_when(
EvadiuTipo == 0 ~ "N達o",
EvadiuTipo == 1 ~ "Sim"))
str(data)
table(data$EvadiuTipo)
models =
caretList(EvadiuTipo ~ .,
data = data,
trControl = control,
metric = "ROC",
tuneList = list(#adaboost     = caretModelSpec(method = "adaboost"), #muito demorado para rodar
arvoreDecisao = caretModelSpec(method = "rpart"),
knn           = caretModelSpec(method = "knn"),
logit         = caretModelSpec(method = "glm", family = "binomial"),
elasticnet    = caretModelSpec(method = "glmnet"),
redeNeural    = caretModelSpec(method = "mlpML"),
rf            = caretModelSpec(method = "ranger")),
preProcess = c("knnImpute", "nzv", "center", "scale"))
control <- trainControl(method = "repeatedcv", #boot, cv, LOOCV, timeslice OR adaptive etc.
number = 10,
repeats = 1,
classProbs = TRUE,
summaryFunction = twoClassSummary,
savePredictions = "final")
control
models =
caretList(EvadiuTipo ~ .,
data = data,
trControl = control,
metric = "ROC",
tuneList = list(#adaboost     = caretModelSpec(method = "adaboost"), #muito demorado para rodar
arvoreDecisao = caretModelSpec(method = "rpart"),
knn           = caretModelSpec(method = "knn"),
logit         = caretModelSpec(method = "glm", family = "binomial"),
elasticnet    = caretModelSpec(method = "glmnet"),
redeNeural    = caretModelSpec(method = "mlpML"),
rf            = caretModelSpec(method = "ranger")),
preProcess = c("knnImpute", "nzv", "center", "scale"))
warnings()
featureSelection_arvoreDecisao = varImp(models$arvoreDecisao)
plot(featureSelection_arvoreDecisao)
featureSelection_logit = varImp(models$logit)
plot(featureSelection_logit)
featureSelection_elasticNet = varImp(models$elasticnet)
plot(featureSelection_elasticNet)
str(data)
modelsPerformance = resamples(models)
bwplot(modelsPerformance)
dotplot(modelsPerformance)
modelCor(modelsPerformance)
xyplot(modelsPerformance)
modelsPerformance = resamples(models)
dotplot(modelsPerformance)
modelCor(modelsPerformance)
xyplot(modelsPerformance)
ensembleModel <- caretEnsemble(models, metric = "ROC", trControl = control)
summary(ensembleModel)
plot(ensembleModel)
plot(featureSelection_arvoreDecisao)
plot(featureSelection_logit)
plot(featureSelection_elasticNet)
featureSelection_arvoreDecisao_results =
data.table(technique = "Decision tree",
variable  = rownames(featureSelection_arvoreDecisao$importance),
value     = featureSelection_arvoreDecisao$importance)
featureSelection_logit_results =
data.table(technique = "logit",
variable  = rownames(featureSelection_logit$importance),
value     = featureSelection_logit$importance)
featureSelection_elasticNet_results =
data.table(technique = "elasticnet",
variable  = rownames(featureSelection_elasticNet$importance),
value     = featureSelection_elasticNet$importance)
featureSelection_results = rbindlist(l = list(featureSelection_arvoreDecisao_results,
featureSelection_logit_results,
featureSelection_elasticNet_results),
use.names = T)
featureSelection_avg =
featureSelection_results %>%
group_by(technique) %>%
arrange(-value.Overall) %>%
mutate(rank = row_number()) %>%
ungroup() %>%
group_by(variable) %>%
mutate(rankMedio = mean(rank)) %>%
ungroup() %>%
distinct(variable, rankMedio) %>%
arrange(rankMedio)
featureSelection_avg %>%
ggplot(aes(y = as.factor(rankMedio), x = rankMedio)) +
geom_segment( aes(x = 0, xend = rankMedio, yend = as.factor(rankMedio))) +
scale_y_discrete(labels = featureSelection_avg$variable) +
geom_point() +
labs(title = "Rank m辿dio dos atributos mais importantes",
subtitle = "Quanto menor o rank, mais importante",
x = "Rank m辿dio",
y = "") +
theme_bw()
